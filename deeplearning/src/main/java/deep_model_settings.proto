syntax="proto2";

package main.java;

message ConfigPreprocess {
		required double eps_1 = 1;
		required double eps_2 = 2;
}

message ConfigKMeans {
        required int32 number_of_clusters = 1;
        required int32 number_of_iterations = 2;
        required int32 type = 3;
} 

message ConfigAutoencoders {
 	required int32 number_of_units = 1;
    
    optional double rho = 2;
	optional double lambda = 3;
	optional double beta = 4;

	optional int32 numEpochs  = 5;
	optional int32 numBatches = 6;
	
	optional double alpha_init = 7;
	optional double alpha_step = 8;
	optional int32  alpha_max_steps = 9;
	
	optional int32 lineSearchStrategy = 10;
	
	optional double alpha = 11;
	optional double momentum = 12;
	optional double initMomentum = 13;
	optional double increaseMomentum = 14;
    optional int32 num_input  = 15;   
    
}

message ConfigFeatureExtractor {
  // FeatureExtractor needs to know the dimensions of the input and feature matrices, as it only gets vectors.
  // If input and feature dimensions match, we do a matrix multiply extraction.
  // If feature dimensions <= input dimensions (and one is strictly smaller) we do convolution
  // Else we throw some exception.
  // The output dimensions (dimensions of the matrices that are appended into the result vector)
  // can be calculated from the input dimensions.
  required int32 input_dim1 = 1;
  required int32 input_dim2 = 2;
  required int32 feature_dim1 = 3;
  required int32 feature_dim2 = 4;
  enum NonLinearity {
    NONE = 0;
  	ABS = 1;
  	SOFT = 2;
  }
  optional NonLinearity non_linearity = 5 [default = NONE];
  optional double soft_threshold = 6;
}

message ConfigPooler {
  required int32 pool_size = 1;
  enum PoolType {
    MAX = 0;
    AVERAGE = 1;
  }
  optional PoolType pool_type = 2 [default = MAX];
}

message ConfigBaseLayer {
  optional ConfigPreprocess config_preprocess = 1;
  optional ConfigKMeans config_kmeans = 2;
  optional ConfigAutoencoders config_autoencoders = 3;
  optional ConfigFeatureExtractor config_feature_extractor = 4;
  required ConfigPooler config_pooler = 5;
}   

message ConfigManuscripts {
    repeated ConfigBaseLayer config_layer = 1;
}
